pipeline {
  agent {
    dockerfile {
      dir 'ci'
      args '-v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.gradle:/home/gradle/.gradle'
    }
  }

  environment {
    TZ = 'Asia/Taipei'
  }

  parameters{
    choice(name: 'TYPE', choices: ['build', 'deploy'], description: '執行類型')
    string(name: 'PROJECT_NAME', defaultValue: 'cclemon-auth', description: '專案')
    choice(name: 'PROFILE', choices: ['dev', 'prod'], description: '環境')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'chmod +x gradlew'
      }
    }

    stage('Build') {
      when {
        expression { return params.TYPE == 'build' }
      }
      steps {
        dir("${params.PROJECT_NAME}") {
          sh "../gradlew clean build -x test -Pprofile=${params.PROFILE}"
        }
      }
    }

    stage('Archive Jar') {
      when {
        expression { return params.TYPE == 'build' }
      }
      steps {
        archiveArtifacts artifacts: "${params.PROJECT_NAME}/build/libs/*.jar", fingerprint: true
      }
    }

    stage('Build Docker Image') {
      when {
        expression { return params.TYPE == 'build' }
      }
      steps {
        dir("${params.PROJECT_NAME}") {
          script {
            def imageName = "${params.PROJECT_NAME}"
            def imageTag = "${params.PROFILE}"
            sh "docker build -t ${imageName}:${imageTag} ."
          }
        }
      }
    }

    stage('Deploy') {
      when {
        expression { return params.TYPE == 'deploy' }
      }
      steps {
        dir("${params.PROJECT_NAME}") {
          script {
            echo "Deploying ${params.PROJECT_NAME} with profile ${params.PROFILE}"
            // 可加上實際部署腳本或指令
            sh "docker-compose up -d"
          }
        }
      }
    }
  }
}
