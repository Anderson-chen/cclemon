pipeline {
  agent { label 'master' }  // 指定在 master 節點執行

  environment {
    TZ = 'Asia/Taipei'
  }

  parameters {
    choice(name: 'PROJECT_NAME', choices: ['cclemon-auth', 'cclemon-health' ,'cclemon-config-server'])
    choice(name: 'PROFILE', choices: ['dev', 'prod'])
  }

  stages {
    stage('Deploy') {
      steps {
        dir("${params.PROJECT_NAME}") {
          script {
            def containerName = "${params.PROJECT_NAME}-${params.PROFILE}"
            def imageName = "${params.PROJECT_NAME}:${params.PROFILE}"

            echo "Deploying ${containerName} using image ${imageName}"

            sh """
              echo "🔄 停止並刪除舊容器（如果存在）"
              docker rm -f ${containerName} || true

              echo "🚀 啟動新容器"
              docker run -d \
                --name ${containerName} \
                --network cclemon-network \
                -e SPRING_PROFILES_ACTIVE=${params.PROFILE} \
                ${imageName}

              echo "⌛ 等待應用健康啟動中..."

              MAX_RETRIES=20
              SLEEP_INTERVAL=3
              for i in \$(seq 1 \$MAX_RETRIES); do
                STATUS=\$(curl -s http://${containerName}/actuator/health | grep -o '"status":"UP"' || true)
                if [ "\$STATUS" = '"status":"UP"' ]; then
                  echo "✅ 健康檢查通過，應用已啟動"
                  break
                else
                  echo "🕒 第 \$i 次重試，應用尚未就緒，等待 \$SLEEP_INTERVAL 秒..."
                  sleep \$SLEEP_INTERVAL
                fi
              done

              # 最終再檢查一次
              FINAL=\$(curl -s http://localhost:${port}/actuator/health | grep -o '"status":"UP"' || true)
              if [ "\$FINAL" != '"status":"UP"' ]; then
                echo "❌ 應用未成功啟動，輸出日誌："
                docker logs ${containerName} || true
                exit 1
              fi
            """
          }
        }
      }
    }
  }
}
